#FROM bylexus/apache-php7
#FROM registrydocker/php7.2-apache
FROM ubuntu:latest


RUN mkdir -p /root/.bin/
COPY docker-install.sh /root/.bin/

ARG APP_DEBUG
RUN if [ "${APP_DEBUG}" = "true" ]; then export ENV=debug;echo "DEBUG MODE ACTIVATED AT BUILD";else echo "NORMAL MODE (set APP_DEBUG=true in .env to activate)"; fi
ARG APP_DEBUG=false


RUN apt-get update && \
    apt-get dist-upgrade -y

## OVERWRITTEN IN RUN.sh if APP_TIMEZONE set
RUN /bin/ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime

RUN apt-get install -y --no-install-recommends \
      apache2 zip tar \
      php7.2 php7.2-cli php7.2-intl \
      libapache2-mod-php7.2 \
      ##php7.2-mcrypt \
      php7.2-apcu php7.2-opcache php7.2-xdebug \
      php7.2-mysql php7.2-pgsql php7.2-sqlite3 \
      php7.2-xml php7.2-xsl \
      php7.2-zip php7.2-soap php7.2-opcache php7.2-curl php7.2-bcmath php7.2-mbstring php7.2-json \
      php7.2-gd \
      php7.2-imagick \
      php7.2-ldap \
      openssh-sftp-server dropbear-run dropbear-bin wget curl rsync nano vim psmisc procps git cron gcc make autoconf libc-dev pkg-config libmcrypt-dev  php-pear php7.2-dev msmtp msmtp-mta software-properties-common

RUN echo INSTALL php-mcrypt
RUN pecl install mcrypt-1.0.1
RUN a2enmod proxy ssl proxy_http remoteip

#RUN echo extension=$(find /usr/lib/php -name "mcrypt.so")  |tee /etc/php/7.2/apache2/conf.d/mcrypt.ini /etc/php/7.2/cli/conf.d/mcrypt.ini
RUN bash -c "echo extension="$(find /usr/lib/php/ -name "mcrypt.so" |head -n1) | tee /etc/php/7.2/apache2/conf.d/mcrypt.ini /etc/php/7.2/cli/conf.d/mcrypt.ini
RUN test -d /etc/php/7.2/mods-available || mkdir /etc/php/7.2/mods-available && bash -c "echo extension="$(find /usr/lib/php/ -name "mcrypt.so" |head -n1) |tee /etc/php/7.2/mods-available/mcrypt.ini

RUN { \
                echo 'opcache.memory_consumption=128'; \
                echo 'opcache.interned_strings_buffer=8'; \
                echo 'opcache.max_accelerated_files=4000'; \
                echo 'opcache.revalidate_freq=60'; \
                echo 'opcache.fast_shutdown=1'; \
                echo 'opcache.enable_cli=1'; \
        } | tee -a /etc/php/7.2/apache2/conf.d/mcrypt.ini  /etc/php/7.2/cli/conf.d/mcrypt.ini /etc/php/7.2/mods-available/mcrypt.ini > /dev/null


#RUN bash -c "echo extension="$(find /usr/lib/php/ -name "mcrypt.so" |head -n1) | tee /etc/php/*/*/conf.d/mcrypt.ini
#RUN find  /etc/php* -name "conf.d"
RUN apt-get -y install nodejs npm

ARG INSTALL_MARIADB
ARG INSTALL_MONGODB
ARG INSTALL_RABBITMQ
ARG INSTALL_REDIS
ARG INSTALL_MARIADB=false
ARG INSTALL_MONGODB=false
ARG INSTALL_RABBITMQ=false
ARG INSTALL_REDIS=false


RUN if [ "${INSTALL_MARIADB}" = "true" ]; then apt-get -y install mariadb-server mariadb-client;else echo "NOT INSTALLING MYSQL(mariadb), set INSTALL_MARIADB=true in .env to install ";echo VALUE IS ;echo "${INSTALL_MARIADB}"; fi
RUN if [ "${INSTALL_MONGODB}" = "true" ]; then apt-get -y install mongodb-server mongodb-clients;else echo "NOT INSTALLING MONGODB, set INSTALL_MONGODB=true in .env to install "; fi
RUN if [ "${INSTALL_RABBITMQ}" = "true" ]; then apt-get -y install rabbitmq-server ;else echo "NOT INSTALLING RABBITMQ, set INSTALL_RABBITMQ=true in .env to install "; fi
RUN if [ "${INSTALL_REDIS}" = "true" ]; then apt-get -y install redis-server redis-sentinel redis-tools ;else echo "NOT INSTALLING REDIS, set INSTALL_REDIS=true in .env to install "; fi

RUN   apt-get clean && \
      rm /var/lib/apt/lists/*_*

# Remove keys
RUN rm /etc/dropbear/dropbear_dss_host_key /etc/dropbear/dropbear_rsa_host_key /etc/dropbear/dropbear_ecdsa_host_key



RUN phpenmod mcrypt
RUN a2enmod rewrite expires ssl && a2dismod mpm_event mpm_worker && a2enmod mpm_prefork
RUN a2enmod remoteip
RUN a2ensite default-ssl
RUN a2ensite 000-default
RUN ls -lh /etc/apache2/sites*/*

RUN sed 's/DocumentRoot \/var\/www$/DocumentRoot \/var\/www\/html/g' /etc/apache2/sites-enabled/* -i
##redirect other vhosts
RUN sed 's/other_vhosts_access.log/access.log/g' -i /etc/apache2/conf-enabled/other-vhosts-access-log.conf

RUN sed 's/\/VirtualHost/Directory "\/var\/www"> \n    Options -Indexes +IncludesNOEXEC +SymLinksIfOwnerMatch\n    AllowOverride All\n<\/Directory>\n     <\/VirtualHost/g' -i /etc/apache2/sites-available/000-default.conf && \
                sed 's/\/VirtualHost/Directory "\/var\/www"> \n    Options -Indexes +IncludesNOEXEC +SymLinksIfOwnerMatch\n    AllowOverride All\n<\/Directory>\n     <\/VirtualHost/g' -i /etc/apache2/sites-available/default-ssl.conf && \
		cp -aurv /etc/apache2/sites-available/ /etc/apache2/sites-available.default ;ln -sf /etc/apache2/sites-available/* /etc/apache2/sites-enabled/

#EXPOSE 80
EXPOSE 443

##fixx www-data userid and only enable sftp for them (bind mount /etc/shells and run "usermod -s /bin/bash www-data" for www-data user login )
RUN sed 's/^www-data:x:1000/www-data:x:33/g' /etc/passwd -i
RUN usermod -s /usr/lib/openssh/sftp-server www-data && echo /usr/lib/openssh/sftp-server >> /etc/shells

##userdirs
RUN ln -s /var/www/html /root/ &&  mkdir -p /var/www/.ssh /var/www/include /var/www/include_local && chown www-data /var/www/ -R && mkdir /root/.ssh && touch /root/.ssh/authorized_keys
RUN touch /var/www/.ssh/authorized_keys && chown root:root /var/www/.ssh /var/www/.ssh/authorized_keys && chmod go-rw  /root/.ssh/authorized_keys /root/.ssh /var/www/.ssh /var/www/.ssh/authorized_keys

#disable catchall document root
RUN sed 's/.\+DocumentRoot.\+//g' -i /etc/apache2/apache2.conf

COPY msmtp-cron-sendmail/sendmail /usr/sbin/sendmail.cron
RUN chmod +x /usr/sbin/sendmail.cron
COPY run-dropbear.sh /usr/local/bin/run.sh
RUN chmod +x /usr/local/bin/run.sh
CMD ["/usr/local/bin/run.sh"]
