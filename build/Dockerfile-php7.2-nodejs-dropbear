#FROM bylexus/apache-php7 #FROM registrydocker/php7.2-apache
#FROM ubuntu:bionic
FROM  thefoundation/upgraded-operating-systems:ubuntu-bionic


ARG APP_AUTOAPTPROXY
RUN if [ "${APP_AUTOAPTPROXY}" = "true" ]; then export ENV=debug;echo "auto-apt-proxy ENABLED AT BUILD";else echo "NO APT PROXY (set APP_AUTOAPTPROXY=true in .env to activate)"; fi
RUN if [ "${APP_AUTOAPTPROXY}" = "true" ]; then apt-get update &&  apt-get autoremove -y --force-yes &&  /bin/bash /i.sh qclean  ;fi
ARG APP_AUTOAPTPROXY=false

ARG APT_HTTP_PROXY_URL
RUN if [ "x$APT_HTTP_PROXY_URL" = "x" ] ; then echo Argument not provided ;else ( echo 'Acquire::http::Proxy "'${APT_HTTP_PROXY_URL}'/";' ;echo 'PassThroughPattern: ^(.*):443$;';)| tee /etc/apt/apt.conf.d/10-proxy   ;fi

RUN /bin/mkdir -p /root/.bin/
COPY docker-install.sh /root/.bin/
RUN ln -s /root/.bin/docker-install.sh /i.sh

## OVERWRITTEN IN RUN.sh if APP_TIMEZONE set
RUN /bin/ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime
ARG APP_DEBUG

RUN if [ "${APP_DEBUG}" = "true" ]; then export ENV=debug;echo "DEBUG MODE ACTIVATED AT BUILD";else echo "NORMAL MODE (set APP_DEBUG=true in .env to activate)"; fi
ARG APP_DEBUG=false

RUN apt-get update && /bin/bash /i.sh fixapt && \
    apt-get dist-upgrade -y

## OVERWRITTEN IN RUN.sh if APP_TIMEZONE set
RUN /bin/ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime

RUN  /bin/bash /i.sh fixapt && apt-get update   && apt-get dist-upgrade -y &&  apt-get install -y  --no-install-recommends software-properties-common && LC_ALL=C.UTF-8 add-apt-repository ppa:ondrej/php  && LC_ALL=C.UTF-8 add-apt-repository ppa:ondrej/apache2 && LC_ALL=C.UTF-8 add-apt-repository ppa:ondrej/pkg-gearman && /bin/bash /i.sh fixapt && apt-get update &&  apt-get install -y --no-install-recommends \
      apache2 zip tar \
      php7.2 php7.2-cli php7.2-intl \
      libapache2-mod-php7.2 \
      ##php7.2-mcrypt \
      php7.2-apcu php7.2-opcache php7.2-xdebug \
      php7.2-mysql php7.2-pgsql php7.2-sqlite3 \
      php7.2-xml php7.2-xsl \
      php7.2-zip php7.2-soap php7.2-opcache php7.2-curl php7.2-bcmath php7.2-mbstring php7.2-json \
      php7.2-gd \
      php7.2-imagick \
      php7.2-ldap \
      openssh-sftp-server dropbear-run dropbear-bin wget curl ca-certificates rsync nano vim psmisc procps git cron gcc make autoconf libc-dev pkg-config libmcrypt-dev  php-pear php7.2-dev msmtp msmtp-mta software-properties-common && pecl channel-update pecl.php.net &&  /bin/bash /i.sh fullclean

RUN echo INSTALL php-mcrypt
RUN apt-get install php7.2-dev && pecl install mcrypt-1.0.1 &&  apt-get purge php7.2-dev && /bin/bash /i.sh fullclean
#RUN echo extension=$(find /usr/lib/php -name "mcrypt.so")  |tee /etc/php/7.2/apache2/conf.d/mcrypt.ini /etc/php/7.2/cli/conf.d/mcrypt.ini
RUN bash -c "echo extension="$(find /usr/lib/php/ -name "mcrypt.so" |head -n1) | tee /etc/php/7.2/apache2/conf.d/mcrypt.ini /etc/php/7.2/cli/conf.d/mcrypt.ini
RUN test -d /etc/php/7.2/mods-available || /bin/mkdir /etc/php/7.2/mods-available && bash -c "echo extension="$(find /usr/lib/php/ -name "mcrypt.so" |head -n1) |tee /etc/php/7.2/mods-available/mcrypt.ini


RUN a2enmod proxy ssl proxy_http remoteip

RUN { \
                echo 'opcache.memory_consumption=128'; \
                echo 'opcache.interned_strings_buffer=8'; \
                echo 'opcache.max_accelerated_files=4000'; \
                echo 'opcache.revalidate_freq=60'; \
                echo 'opcache.fast_shutdown=1'; \
                echo 'opcache.enable_cli=1'; \
        } | tee -a /etc/php/7.2/apache2/conf.d/mcrypt.ini  /etc/php/7.2/cli/conf.d/mcrypt.ini /etc/php/7.2/mods-available/mcrypt.ini > /dev/null


#RUN bash -c "echo extension="$(find /usr/lib/php/ -name "mcrypt.so" |head -n1) | tee /etc/php/*/*/conf.d/mcrypt.ini
#RUN find  /etc/php* -name "conf.d"
RUN apt-get -y install nodejs npm

##SERVICES ( order of entries with ARG= decide on position in increasin-feature build)
ARG INSTALL_IMAGICK
ARG INSTALL_REDIS
ARG INSTALL_MARIADB

ARG INSTALL_NPM
ARG INSTALL_MONGODB
ARG INSTALL_RABBITMQ
ARG INSTALL_SWISH

ARG INSTALL_IMAGICK=true
ARG INSTALL_REDIS=true
ARG INSTALL_MARIADB=true

ARG INSTALL_NPM=false
ARG INSTALL_MONGODB=false
ARG INSTALL_RABBITMQ=false
ARG INSTALL_SWISH=false

RUN echo "installer selection: mariadb:"${INSTALL_MARIADB}" mongodb: "${INSTALL_MONGODB}" RABBITMQ: "${INSTALL_RABBITMQ}" IMAGICK:"${INSTALL_IMAGICK}

RUN if [ "${INSTALL_IMAGICK}" = "true"   ]; then echo "+Imagick"; /bin/bash /i.sh imagemagick && /bin/bash /i.sh fixapt && apt-get update && /bin/bash /i.sh fullclean  ; else echo "NOT INSTALLING imagemagick, set INSTALL_IMAGICK=true in .env to install "; fi
RUN if [ "${INSTALL_MONGODB}" = "true"   ]; then  /bin/bash /i.sh fixapt && apt-get update && apt-get -y install --no-install-recommends mongodb-server mongodb-clients &&  /bin/bash /i.sh fullclean  ;else echo "NOT INSTALLING MONGODB, set INSTALL_MONGODB=true in .env to install "; fi
RUN if [ "${INSTALL_RABBITMQ}" = "true"  ]; then  /bin/bash /i.sh fixapt && apt-get update && apt-get -y install --no-install-recommends rabbitmq-server &&  /bin/bash /i.sh fullclean  ;else echo "NOT INSTALLING RABBITMQ, set INSTALL_RABBITMQ=true in .env to install "; fi
RUN if [ "${INSTALL_REDIS}" = "true"     ]; then  /bin/bash /i.sh fixapt && apt-get update && apt-get -y install --no-install-recommends redis-server redis-sentinel redis-tools &&  /bin/bash /i.sh fullclean  ;else echo "NOT INSTALLING REDIS, set INSTALL_REDIS=true in .env to install "; fi
RUN if [ "${INSTALL_NPM}" = "true"       ]; then apt-get update && apt-get -y install --no-install-recommends npm ;else echo "NOT INSTALLING npm, set INSTALL_NPM=true in .env to install "; fi
RUN if [ "${INSTALL_SWISH}" = "true"     ]; then  /bin/bash /i.sh fixapt && apt-get update && apt-get -y install --no-install-recommends swish-e &&  /bin/bash /i.sh fullclean  ;else echo "NOT INSTALLING swish-e, set INSTALL_SWISH=true in .env to install "; fi

RUN if [ "${INSTALL_MARIADB}" = "true"   ]; then apt-get update  && apt-get install -y  --no-install-recommends  dirmngr software-properties-common || true  &&   apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8 && LC_ALL=C.UTF-8 add-apt-repository 'deb [arch=amd64,arm64,ppc64el] http://mirrors.n-ix.net/mariadb/repo/10.3/ubuntu bionic main' && apt-get update && export DEBIAN_FRONTEND=noninteractive &&  apt-get -y install --no-install-recommends mariadb-server mariadb-client &&  /bin/bash /i.sh fullclean   ;else echo "NOT INSTALLING MYSQL(mariadb), set INSTALL_MARIADB=true in .env to install ";echo VALUE IS ;echo "${INSTALL_MARIADB}"; fi

#######
COPY pool-www.conf /root/www.conf
#######

COPY run-dropbear.sh /usr/local/bin/run.sh
COPY supervisord.conf /etc/supervisor/supervisord.conf
COPY run-apache.sh /run-apache.sh
RUN chmod +x /usr/local/bin/run.sh
 
## INSTALL UTiLS , Fix Apache , rectify www-data , fpm socket etc
RUN /bin/bash /i.sh util && /bin/bash /i.sh apache &&  /bin/bash /i.sh wwwdata


##cleanup stage will be always executed due to random file , so upgrades happen every build ( no docker cache)
RUN head -c 5 /dev/random > ignore_this_file && apt-get update && apt-get dist-upgrade -y --force-yes &&  (( sleep 2;echo 'Yes, do as I say!') |apt-get purge -y --force-yes shared-mime-info eject initramfs-tools nodejs nodejs-dev dbus make autoconf g++ gcc cpp  e2fsprogs python-dbus gnupg-agent build-essential build-essential software-properties-common libc-dev ) && /bin/bash /i.sh cleanup

#EXPOSE 80
EXPOSE 443

##
COPY msmtp-cron-sendmail/sendmail /usr/sbin/sendmail.cron
RUN chmod +x /usr/sbin/sendmail.cron


RUN /bin/bash -c "date -u +%Y-%m-%d_%H.%M |tee -a /etc/container-build-time" && /bin/bash -c "test -f /etc/apt/apt.conf.d/10-proxy && rm /etc/apt/apt.conf.d/10-proxy;true"
WORKDIR /var/www
HEALTHCHECK CMD /usr/bin/curl--fail -H "User-Agent: docker-health-check/over9000" -kL https://127.0.0.1/ || exit 1
CMD ["/bin/bash","/usr/local/bin/run.sh"]
MAINTAINER commits@hideaddress.net
