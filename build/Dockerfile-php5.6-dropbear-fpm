#BUILD#
#FROM registrydocker/php5.6-apache #FROM eboraas/apache-php
#FROM ubuntu:bionic
FROM  thefoundation/upgraded-operating-systems:ubuntu-bionic-imagick

## put helper script
RUN /bin/mkdir -p /root/.bin/
COPY docker-install.sh /root/.bin/
RUN ln -s /root/.bin/docker-install.sh /i.sh
## apt proxy
ARG APP_AUTOAPTPROXY
ARG APT_HTTP_PROXY_URL
COPY docker-apt-proxy.sh /root/.bin/
RUN /bin/bash /root/.bin/docker-apt-proxy.sh
ARG APP_AUTOAPTPROXY=false

## OVERWRITTEN IN RUN.sh if APP_TIMEZONE set
RUN /bin/ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime && export DEBIAN_FRONTEND=noninteractive && apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata && DEBIAN_FRONTEND=noninteractive dpkg-reconfigure --frontend noninteractive tzdata &&  /bin/bash /i.sh fullclean

ARG APP_DEBUG

RUN if [ "${APP_DEBUG}" = "true" ]; then export ENV=debug;echo "DEBUG MODE ACTIVATED AT BUILD";else echo "NORMAL MODE (set APP_DEBUG=true in .env to activate)"; fi
ARG APP_DEBUG=false

##########
## the following adds ppa's and installs the destined php version and needs gpg-agent and drmngr for apt-key
#RUN  /bin/bash /i.sh fixapt && apt-get update  &&   apt-get dist-upgrade -y || true &&  apt-get install -y  --no-install-recommends  dirmngr software-properties-common || true  && export  LC_ALL=C.UTF-8 && LC_ALL=C.UTF-8 apt-get update && LC_ALL=C.UTF-8 add-apt-repository ppa:ondrej/php  && LC_ALL=C.UTF-8 add-apt-repository ppa:ondrej/apache2 && LC_ALL=C.UTF-8 add-apt-repository ppa:ondrej/pkg-gearman && /bin/bash /i.sh fixapt && apt-get update &&  apt-get install -y --no-install-recommends php5.6 php5.6-cli || true && apt-get -y purge  software-properties-common && apt-get autoremove -y --force-yes || true &&   /bin/bash /i.sh fullclean
RUN  /bin/bash /i.sh fixapt && /bin/bash /i.sh php-ppa && apt-get update &&  apt-get install -y --no-install-recommends php5.6 php5.6-cli && /bin/bash /i.sh fixapt
###

RUN /bin/bash /i.sh fixapt && apt-get update &&  apt-get dist-upgrade -y &&  apt-get install -y --no-install-recommends \
      apache2 zip tar php5.6 php5.6-cli php5.6-intl \
      ###libapache2-mod-php5.6  ##php5.6-mcrypt \#      php5.6-apcu php5.6-opcache php5.6-xdebug \#      php5.6-mysql php5.6-pgsql php5.6-sqlite3 \#      php5.6-xml php5.6-xsl \#      php5.6-zip php5.6-soap php5.6-opcache php5.6-curl php5.6-bcmath php5.6-mbstring php5.6-json \#      php5.6-gd \#      php5.6-imagick \#      php5.6-ldap php5.6-imap \
            composer openssh-sftp-server supervisor wget curl ca-certificates  rsync nano vim psmisc procps git cron gcc make autoconf libc-dev pkg-config libmcrypt-dev  php-pear php5.6-dev msmtp msmtp-mta dirmngr software-properties-common &&  /bin/bash /i.sh qclean

RUN composer auto-update || true
RUN dpkg --get-selections |grep -v deinstall|grep php7.0- -q  && (apt-get -y purge php7.0-*  ) || true
RUN dpkg --get-selections |grep -v deinstall|grep php7.1- -q  && (apt-get -y purge php7.1-*  ) || true
RUN dpkg --get-selections |grep -v deinstall|grep php7.2- -q  && (apt-get -y purge php7.2-*  ) || true
RUN dpkg --get-selections |grep -v deinstall|grep php7.3- -q  && (apt-get -y purge php7.3-*  ) || true
RUN dpkg --get-selections |grep -v deinstall|grep php7.4- -q  && (apt-get -y purge php7.4-*  ) || true


##without php-cli , first step will fail ( version detection ),  second part is #DROPBEAR MANUAL INSTALL STAGE ( ubuntu source sometimes too old , weak ciphers disabling necessary)
RUN /bin/bash /i.sh php-fpm && /bin/bash /i.sh dropbear

##  systemd hurts and prevents configuration of certain packages, it will not easily run as it does hav PID 1 so we just let it say systemtrue and let it rot
RUN test -f /bin/systemctl  && ( rm /bin/systemctl && dpkg-divert --add /bin/systemctl && ln -sT /bin/true /bin/systemctl ) || true

##SERVICES
ARG INSTALL_IMAGICK
ARG INSTALL_REDIS
ARG INSTALL_MARIADB

ARG INSTALL_NPM
ARG INSTALL_MONGODB
ARG INSTALL_RABBITMQ
ARG INSTALL_SWISH

ARG INSTALL_IMAGICK=true
ARG INSTALL_REDIS=true
ARG INSTALL_MARIADB=true

ARG INSTALL_NPM=false
ARG INSTALL_MONGODB=false
ARG INSTALL_RABBITMQ=false
ARG INSTALL_SWISH=false

RUN if [ "${INSTALL_MONGODB}" = "true" ]; then apt-get update && apt-get -y install --no-install-recommends mongodb-server mongodb-clients && /bin/bash /i.sh qclean ;else echo "NOT INSTALLING MONGODB, set INSTALL_MONGODB=true in .env to install "; fi && \
 if [ "${INSTALL_RABBITMQ}" = "true" ]; then apt-get update && apt-get -y install --no-install-recommends rabbitmq-server  && /bin/bash /i.sh qclean ;else echo "NOT INSTALLING RABBITMQ, set INSTALL_RABBITMQ=true in .env to install "; fi && \
 if [ "${INSTALL_REDIS}" = "true" ]; then apt-get update && apt-get -y install --no-install-recommends redis-server redis-sentinel redis-tools  && /bin/bash /i.sh qclean ;else echo "NOT INSTALLING REDIS, set INSTALL_REDIS=true in .env to install "; fi && \
 if [ "${INSTALL_SWISH}" = "true" ]; then apt-get update && apt-get -y install --no-install-recommends swish-e  && /bin/bash /i.sh qclean ;else echo "NOT INSTALLING swish-e, set INSTALL_SWISH=true in .env to install "; fi && \
 if [ "${INSTALL_IMAGICK}" = "true" ]; then /bin/bash /i.sh imagick ; /bin/bash /i.sh qclean &>/dev/null ; else echo "NOT INSTALLING imagemagick, set INSTALL_IMAGICK=true in .env to install "; fi && \
 if [ "${INSTALL_NPM}" = "true" ]; then apt-get update && apt-get -y install --no-install-recommends npm  && /bin/bash /i.sh qclean ;else echo "NOT INSTALLING npm, set INSTALL_NPM=true in .env to install "; fi && \
 if [ "${INSTALL_MARIADB}" = "true"   ]; then apt-get update  && apt-get install -y  --no-install-recommends  dirmngr software-properties-common || true  &&   export LC_ALL=C.UTF-8  && curl -LsS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup --mariadb-server-version=10.3 | LC_ALL=C.UTF-8  bash  && apt-get update && export DEBIAN_FRONTEND=noninteractive &&  apt-get -y install --no-install-recommends mariadb-server mariadb-client &&  /bin/bash /i.sh fullclean  ;else echo "NOT INSTALLING MYSQL(mariadb), set INSTALL_MARIADB=true in .env to install ";echo VALUE IS ;echo "${INSTALL_MARIADB}"; fi && \
 echo installer finished

#RUN if [ "${INSTALL_MARIADB}" = "true"   ]; then apt-get update  && apt-get install -y  --no-install-recommends  dirmngr software-properties-common || true  &&   curl -sL "http://keyserver.ubuntu.com/pks/lookup?op=get&search=0xF1656F24C74CD1D8" | apt-key add && LC_ALL=C.UTF-8 add-apt-repository 'deb [arch=amd64,arm64,ppc64el] http://mirrors.n-ix.net/mariadb/repo/10.3/ubuntu bionic main' && apt-get update && export DEBIAN_FRONTEND=noninteractive &&  apt-get -y install --no-install-recommends mariadb-server mariadb-client &&  /bin/bash /i.sh fullclean  ;else echo "NOT INSTALLING MYSQL(mariadb), set INSTALL_MARIADB=true in .env to install ";echo VALUE IS ;echo "${INSTALL_MARIADB}"; fi&& \

#######
COPY pool-www.conf /root/www.conf
#######
COPY supervisor-logger _0_crt-snakeoil.sh  _0_fix-composer.sh  _0_fix-dropbear.sh  _0_get-toolkit.sh  _0_sys-mailprep.sh  _1_php-initprep.sh  _1_sql-initprep.sh  _1_sys-mongopre.sh  _1_www-userprep.sh /
COPY supervisord.conf /etc/supervisor/supervisord.conf
COPY run-apache.sh /run-apache.sh
RUN chmod +x /usr/local/bin/run.sh /supervisor-logger

## INSTALL UTiLS , Fix Apache , rectify www-data , fpm socket etc
RUN /bin/bash /i.sh util && /bin/bash /i.sh apache &&  /bin/bash /i.sh wwwdata

#SQUASH#
##cleanup stage will be always executed due to random file , so upgrades happen every build ( no docker cache)
RUN head -c 5 /dev/random > ignore_this_file && apt-get update && apt-get dist-upgrade -y --force-yes &&  (( sleep 2;echo 'Yes, do as I say!') |apt-get purge -y --force-yes shared-mime-info eject initramfs-tools nodejs nodejs-dev dbus make autoconf g++ gcc cpp  e2fsprogs python-dbus gnupg-agent build-essential build-essential software-properties-common libc-dev ) && /bin/bash /i.sh cleanup

#EXPOSE 80
EXPOSE 443

##
COPY msmtp-cron-sendmail/sendmail /usr/sbin/sendmail.cron
RUN chmod +x /usr/sbin/sendmail.cron

RUN /bin/bash -c "date -u +%Y-%m-%d_%H.%M |tee -a /etc/container-build-time" && /bin/bash -c "test -f /etc/apt/apt.conf.d/10-proxy && rm /etc/apt/apt.conf.d/10-proxy;true"
COPY 000-default.conf default-ssl.conf /etc/apache2/sites-available/
COPY 000-default.conf default-ssl.conf /etc/apache2/sites-enabled/
COPY 000-default.conf default-ssl.conf /etc/apache2/sites-available.default/
COPY _0_crt-snakeoil.sh  _0_fix-composer.sh  _0_fix-dropbear.sh  _0_get-toolkit.sh  _0_sys-mailprep.sh  _1_php-initprep.sh  _1_sql-initprep.sh  _1_sys-mongopre.sh  _1_www-userprep.sh /
COPY run-dropbear.sh /usr/local/bin/run.sh
RUN chmod +x /usr/local/bin/run.sh

WORKDIR /var/www
HEALTHCHECK CMD /usr/bin/curl --fail -H "User-Agent: docker-health-check/over9000" -kL https://127.0.0.1/ || exit 1
CMD ["/bin/bash","/usr/local/bin/run.sh"]
MAINTAINER commits@hideaddress.net
