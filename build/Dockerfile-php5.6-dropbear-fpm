#FROM registrydocker/php5.6-apache
#FROM eboraas/apache-php
FROM ubuntu:bionic

RUN /bin/mkdir -p /root/.bin/
COPY docker-install.sh /root/.bin/
RUN /bin/bash /root/.bin/docker-install.sh fixapt

## OVERWRITTEN IN RUN.sh if APP_TIMEZONE set
RUN /bin/ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime
ARG APP_DEBUG

RUN if [ "${APP_DEBUG}" = "true" ]; then export ENV=debug;echo "DEBUG MODE ACTIVATED AT BUILD";else echo "NORMAL MODE (set APP_DEBUG=true in .env to activate)"; fi
ARG APP_DEBUG=false

ARG APP_AUTOAPTPROXY
RUN if [ "${APP_AUTOAPTPROXY}" = "true" ]; then export ENV=debug;echo "auto-apt-proxy ENABLED AT BUILD";else echo "NO APT PROXY (set APP_AUTOAPTPROXY=true in .env to activate)"; fi
RUN if [ "${APP_AUTOAPTPROXY}" = "true" ]; then apt-get update &&  apt-get autoremove -y --force-yes &&  /bin/bash /root/.bin/docker-install.sh qclean  ;fi
ARG APP_AUTOAPTPROXY=false

ARG APT_HTTP_PROXY_URL
RUN if [ "x$APT_HTTP_PROXY_URL" = "x" ] ; then echo Argument not provided ;else ( echo 'Acquire::http::Proxy "'${APT_HTTP_PROXY_URL}'/";' ;echo 'PassThroughPattern: ^(.*):443$;';)| tee /etc/apt/apt.conf.d/10-proxy   ;fi

#RUN dpkg --get-selections |grep -v deinstall|grep php7.0- -q  && (apt-get -y purge php7.0-*  ) || true
#RUN dpkg --get-selections |grep -v deinstall|grep php7.1- -q  && (apt-get -y purge php7.1-*  ) || true
#RUN dpkg --get-selections |grep -v deinstall|grep php7.2- -q  && (apt-get -y purge php7.2-*  ) || true
#RUN dpkg --get-selections |grep -v deinstall|grep php7.3- -q  && (apt-get -y purge php7.3-*  ) || true

RUN apt-get update && apt-get -y install  software-properties-common && add-apt-repository ppa:ondrej/php  && /bin/bash /root/.bin/docker-install.sh fixapt && apt-get update && apt-get -y install  php5.6-mbstring php5.6-mcrypt php5.6-mysql php5.6-xml php5.6-cli

RUN /bin/bash /root/.bin/docker-install.sh fixapt && apt-get update &&  apt-get dist-upgrade -y &&  apt-get install -y --no-install-recommends \
      apache2 zip tar php5.6 php5.6-cli php5.6-intl \
      ###libapache2-mod-php5.6  ##php5.6-mcrypt \#      php5.6-apcu php5.6-opcache php5.6-xdebug \#      php5.6-mysql php5.6-pgsql php5.6-sqlite3 \#      php5.6-xml php5.6-xsl \#      php5.6-zip php5.6-soap php5.6-opcache php5.6-/usr/bin/curlphp5.6-bcmath php5.6-mbstring php5.6-json \#      php5.6-gd \#      php5.6-imagick \#      php5.6-ldap php5.6-imap \
            composer openssh-sftp-server supervisor wget curl ca-certificates  rsync nano vim psmisc procps git cron gcc make autoconf libc-dev pkg-config libmcrypt-dev  php-pear php5.6-dev msmtp msmtp-mta dirmngr software-properties-common &&  /bin/bash /root/.bin/docker-install.sh qclean
RUN composer auto-update || true

##ENABLE MODULES
RUN a2dismod php5.6 || true && a2dismod mpm_prefork mpm_worker && a2enmod actions alias proxy_fcgi setenvif proxy ssl proxy_http remoteip rewrite expires
## SELECT mpm_prefork ## only libapache-mod-php
#RUN a2dismod mpm_event mpm_worker && a2enmod mpm_prefork
## SELECT mpm_event ## only FPM
RUN a2dismod mpm_prefork mpm_worker && a2enmod mpm_event
##ENABLE SITES
RUN a2ensite default-ssl && a2ensite 000-default && ls -lh /etc/apache2/sites*/*

#######
RUN /bin/mkdir -p /root/.bin/
COPY docker-install.sh /root/.bin/

##DROPBEAR MANUAL INSTALL STAGE ( ubuntu source sometimes too old , weak ciphers disabling necessary)
RUN /bin/bash /root/.bin/docker-install.sh dropbear

##without php-cli , this step will fail ( version detection )
RUN /bin/bash /root/.bin/docker-install.sh php-fpm

###need gpg-agent and drmngr for apt-key
RUN apt-get update && apt-get install -y --no-install-recommends gnupg-agent dirmngr &&  /bin/bash /root/.bin/docker-install.sh qclean

## systemd hurts and prevents configuration of certain packages, it will not easily run as it does hav PID 1 so we just let it say systemtrue and let it rot
RUN test -f /bin/systemctl  && ( rm /bin/systemctl && dpkg-divert --add /bin/systemctl && ln -sT /bin/true /bin/systemctl ) || true

##SERVICES
ARG INSTALL_MARIADB
ARG INSTALL_MONGODB
ARG INSTALL_RABBITMQ
ARG INSTALL_REDIS
ARG INSTALL_SWISH
ARG INSTALL_IMAGICK
ARG INSTALL_NPM

ARG INSTALL_MARIADB=false
ARG INSTALL_MONGODB=false
ARG INSTALL_RABBITMQ=false
ARG INSTALL_REDIS=false
ARG INSTALL_SWISH=false
ARG INSTALL_IMAGICK=false
ARG INSTALL_NPM=false

RUN if [ "${INSTALL_MARIADB}" = "true" ]; then apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8 && LC_ALL=C.UTF-8 add-apt-repository 'deb [arch=amd64,arm64,i386,ppc64el] http://mirrors.dotsrc.org/mariadb/repo/10.3/ubuntu xenial main' && apt-get update && export DEBIAN_FRONTEND=noninteractive &&  apt-get -y install --no-install-recommends mariadb-server mariadb-client mariadb-common && /bin/bash /root/.bin/docker-install.sh qclean ;else echo "NOT INSTALLING MYSQL(mariadb), set INSTALL_MARIADB=true in .env to install ";echo VALUE IS ;echo "${INSTALL_MARIADB}"; fi
RUN if [ "${INSTALL_MONGODB}" = "true" ]; then apt-get update && apt-get -y install --no-install-recommends mongodb-server mongodb-clients && /bin/bash /root/.bin/docker-install.sh qclean ;else echo "NOT INSTALLING MONGODB, set INSTALL_MONGODB=true in .env to install "; fi
RUN if [ "${INSTALL_RABBITMQ}" = "true" ]; then apt-get update && apt-get -y install --no-install-recommends rabbitmq-server  && /bin/bash /root/.bin/docker-install.sh qclean ;else echo "NOT INSTALLING RABBITMQ, set INSTALL_RABBITMQ=true in .env to install "; fi
RUN if [ "${INSTALL_REDIS}" = "true" ]; then apt-get update && apt-get -y install --no-install-recommends redis-server redis-sentinel redis-tools  && /bin/bash /root/.bin/docker-install.sh qclean ;else echo "NOT INSTALLING REDIS, set INSTALL_REDIS=true in .env to install "; fi
RUN if [ "${INSTALL_SWISH}" = "true" ]; then apt-get update && apt-get -y install --no-install-recommends swish-e  && /bin/bash /root/.bin/docker-install.sh qclean ;else echo "NOT INSTALLING swish-e, set INSTALL_SWISH=true in .env to install "; fi
RUN if [ "${INSTALL_IMAGICK}" = "true" ]; then /bin/bash /root/.bin/docker-install.sh imagick ; /bin/bash /root/.bin/docker-install.sh qclean &>/dev/null ; else echo "NOT INSTALLING imagemagick, set INSTALL_IMAGICK=true in .env to install "; fi
RUN if [ "${INSTALL_NPM}" = "true" ]; then apt-get update && apt-get -y install --no-install-recommends npm  && /bin/bash /root/.bin/docker-install.sh qclean ;else echo "NOT INSTALLING npm, set INSTALL_NPM=true in .env to install "; fi

#######
COPY pool-www.conf /root/www.conf
#######

COPY run-dropbear.sh /usr/local/bin/run.sh
COPY supervisord.conf /etc/supervisor/supervisord.conf
COPY run-apache.sh /run-apache.sh
RUN chmod +x /usr/local/bin/run.sh
 
## INSTALL UTiLS , Fix Apache , rectify www-data , fpm socket etc
RUN /bin/bash /i.sh util && /bin/bash /i.sh apache &&  /bin/bash /i.sh wwwdata


##cleanup stage will be always executed due to random file , so upgrades happen every build ( no docker cache)
RUN head -c 5 /dev/random > ignore_this_file && apt-get update && apt-get dist-upgrade -y --force-yes &&  (( sleep 2;echo 'Yes, do as I say!') |apt-get purge -y --force-yes shared-mime-info eject initramfs-tools nodejs nodejs-dev dbus make autoconf g++ gcc cpp  e2fsprogs python-dbus gnupg-agent build-essential build-essential software-properties-common libc-dev ) && /bin/bash /i.sh cleanup

#EXPOSE 80
EXPOSE 443

##
COPY msmtp-cron-sendmail/sendmail /usr/sbin/sendmail.cron
RUN chmod +x /usr/sbin/sendmail.cron


RUN /bin/bash -c "date -u +%Y-%m-%d_%H.%M |tee -a /etc/container-build-time" && /bin/bash -c "test -f /etc/apt/apt.conf.d/10-proxy && rm /etc/apt/apt.conf.d/10-proxy;true"
WORKDIR /var/www
HEALTHCHECK CMD /usr/bin/curl--fail -H "User-Agent: docker-health-check/over9000" -kL https://127.0.0.1/ || exit 1
CMD ["/bin/bash","/usr/local/bin/run.sh"]
MAINTAINER commits@hideaddress.net
