#BUILD#
#FROM bylexus/apache-php7 #FROM blitznote/debase:18.04 ##debase only works with sse4 #FROM registrydocker/php7.4-apache
#FROM ubuntu:bionic
FROM  thefoundation/upgraded-operating-systems:ubuntu-bionic-imagick
ENV WEBSERVER=apache

ENV TERM xterm-256color

## helper script dir
RUN /bin/mkdir -p /root/.bin/
## apt proxy
ARG APP_AUTOAPTPROXY
ARG APT_HTTP_PROXY_URL
COPY docker-apt-proxy.sh /root/.bin/
ARG APP_AUTOAPTPROXY=false
RUN /bin/bash  /root/.bin/docker-apt-proxy.sh

##  systemd hurts and prevents configuration of certain packages, it will not easily run as it does not have PID 1 in docker so we just let it say systemtrue and let it rot
RUN test -f /bin/systemctl  && ( rm /bin/systemctl && dpkg-divert --add /bin/systemctl && ln -sT /bin/true /bin/systemctl ) || true && apt-key update 2>/dev/null || true

RUN if [ "${APP_DEBUG}" = "true" ]; then export ENV=debug;echo "DEBUG MODE ACTIVATED AT BUILD";else echo "NORMAL MODE (set APP_DEBUG=true in .env to activate)"; fi
ARG APP_DEBUG=false

COPY docker-prepare.sh /root/.bin/docker-install.sh
RUN ln -s /root/.bin/docker-install.sh /i.sh

## OVERWRITTEN IN RUN.sh if APP_TIMEZONE set
RUN /bin/ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime && export DEBIAN_FRONTEND=noninteractive  &&    /bin/bash /i.sh fixapt && apt-get update >/dev/null && DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata  && DEBIAN_FRONTEND=noninteractive dpkg-reconfigure --frontend noninteractive tzdata &&  /bin/bash /i.sh quickclean

##SERVICES ( order of entries with ARG= decide on position in increasin-feature build)

ARG INSTALL_IMAGICK=true
ARG INSTALL_REDIS=true
ARG INSTALL_MARIADB=true

ARG INSTALL_NPM=false
ARG INSTALL_MONGODB=false
ARG INSTALL_RABBITMQ=false
## ARG INSTALL_SWISH=false##only 5.6

RUN echo "installer selection: mariadb:"${INSTALL_MARIADB}" mongodb: "${INSTALL_MONGODB}" RABBITMQ: "${INSTALL_RABBITMQ}" IMAGICK:"${INSTALL_IMAGICK}

RUN echo preinstaller && \
 /bin/bash /i.sh fixapt && apt-get update && \
 if [ "${INSTALL_MONGODB}" = "true"   ]; then  DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends mongodb-server mongodb-clients          2>&1|grep -v -e Get -e ^Preparing -e ^Unpacking ;else echo "NOT INSTALLING MONGODB, set INSTALL_MONGODB=true in .env to install "; fi && \
 if [ "${INSTALL_RABBITMQ}" = "true"  ]; then  DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends rabbitmq-server                         2>&1|grep -v -e Get -e ^Preparing -e ^Unpacking ;else echo "NOT INSTALLING RABBITMQ, set INSTALL_RABBITMQ=true in .env to install "; fi && \
 if [ "${INSTALL_REDIS}" = "true"     ]; then  DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends redis-server redis-sentinel redis-tools 2>&1|grep -v -e Get -e ^Preparing -e ^Unpacking ;else echo "NOT INSTALLING REDIS, set INSTALL_REDIS=true in .env to install "; fi && \
 if [ "${INSTALL_NPM}" = "true"       ]; then  DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends npm                                     2>&1|grep -v -e Get -e ^Preparing -e ^Unpacking ;else echo "NOT INSTALLING npm, set INSTALL_NPM=true in .env to install "; fi && \
 if [ "${INSTALL_SWISH}" = "true"     ]; then  DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends swish-e                                 2>&1|grep -v -e Get -e ^Preparing -e ^Unpacking ;else echo "NOT INSTALLING swish-e, set INSTALL_SWISH=true in .env to install "; fi   &&  /bin/bash /i.sh quickclean

RUN  if [ "${INSTALL_MARIADB}" = "true"   ]; then apt-get update  && \
                            apt-get install -y  --no-install-recommends   curl ca-certificates apt-transport-https dirmngr software-properties-common || true  && \
                            export LC_ALL=C.UTF-8  && curl -LsS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | LC_ALL=C.UTF-8  bash  && \
                            apt-get update && export DEBIAN_FRONTEND=noninteractive &&  apt-get -y install --no-install-recommends mariadb-server mariadb-client && \
                            rm /var/lib/mysql/ -rf ;/bin/bash /i.sh quickclean  ; \
                      else echo "NOT INSTALLING MYSQL(mariadb), set INSTALL_MARIADB=true in .env to install ";echo VALUE IS ;echo "${INSTALL_MARIADB}"; fi && \
 echo services installer finished

 #apt fix and DROPBEAR MANUAL INSTALL STAGE ( ubuntu source sometimes too old , weak ciphers disabling necessary)
 RUN  echo "installing php ppa and DROPBEAR" && /bin/bash /i.sh fixapt && /bin/bash /i.sh php-ppa && /bin/bash /i.sh dropbear &&  /bin/bash /i.sh quickclean
###



###
RUN /bin/bash /i.sh debiansetup
RUN /bin/bash /i.sh util

ENV PHP_VERSION 5.6
RUN  echo "installing php"${PHP_VERSION} &&  apt-get update &&  DEBIAN_FRONTEND=noninteractive  apt-get install -y --no-install-recommends php${PHP_VERSION} php${PHP_VERSION}-cli php${PHP_VERSION}-intl  &&  /bin/bash /i.sh _do_cleanup_quick

RUN php --version |grep "${PHP_VERSION}"

COPY docker-install.sh /root/.bin/

##########

##without php-cli , step will fail ( version detection )
RUN /bin/bash /i.sh php-basic
RUN /bin/bash /i.sh php-fpm

RUN if [ "${INSTALL_IMAGICK}" = "true"   ]; then echo "+Imagick"; /bin/bash /i.sh imagemagick && /bin/bash /i.sh fixapt && apt-get update  ; else echo "NOT INSTALLING imagemagick, set INSTALL_IMAGICK=true in .env to install "; fi

RUN which apt-get &&  if [ "${WEBSERVER}" = "apache"     ]; then  apt-get update >/dev/null && DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends apache2 && /bin/bash /i.sh apache  ;fi
RUN which apt-get && if [ "${WEBSERVER}" = "nginx"     ]; then   apt-get update >/dev/null && DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends nginx-full ;fi


#######
COPY pool-www.conf /root/www.conf
#######
## INSTALL UTiLS , Fix Apache , rectify www-data , fpm socket etc
RUN /bin/bash /i.sh fixapt && apt-get update   &&  apt-get -y --no-install-recommends install memcached && /bin/bash /i.sh wwwdata

##
COPY msmtp-cron-sendmail/sendmail /usr/sbin/sendmail.cron
RUN chmod +x /usr/sbin/sendmail.cron

COPY supervisord.conf /etc/supervisor/supervisord.conf
COPY run-apache.sh /run-apache.sh


RUN /bin/bash -c "date -u +%Y-%m-%d_%H.%M |tee -a /etc/container-build-time" && /bin/bash -c "test -f /etc/apt/apt.conf.d/10-proxy && rm /etc/apt/apt.conf.d/10-proxy;true"
RUN mkdir  /etc/apache-extra-config-varwww/ /etc/apache-extra-config-vhost/ /etc/apache-extra-config-security/
COPY 000-default.conf default-ssl.conf /etc/apache2/sites-available/
COPY 000-default.conf default-ssl.conf /etc/apache2/sites-enabled/
COPY 000-default.conf default-ssl.conf /etc/apache2/sites-available.default/

WORKDIR /var/www
HEALTHCHECK CMD /usr/bin/curl --fail -H "User-Agent: docker-health-check/over9000" -kL https://127.0.0.1/ || exit 1
CMD ["/bin/bash","/usr/local/bin/run.sh"]
MAINTAINER commits@hideaddress.net

#SQUASH#
##cleanup stage will be always executed due to random file , so upgrades happen every build ( no docker cache)
RUN head -c 5 /dev/random > ignore_this_file && apt-get update && apt-get -y -f install && dpkg --configure -a && apt-get dist-upgrade -y --force-yes &&  (( sleep 2;echo 'Yes, do as I say!') |apt-get purge -y --force-yes shared-mime-info eject initramfs-tools nodejs nodejs-dev dbus make autoconf g++ gcc cpp  python-dbus gnupg-agent build-essential build-essential software-properties-common libc-dev ) && /bin/bash /i.sh cleanup
RUN rm /etc/apt/apt.conf.d/10-proxy|| true

COPY supervisor-logger x-finalcommands.sh _0_crt-snakeoil.sh  _0_fix-composer.sh  _0_fix-dropbear.sh  _0_get-toolkit.sh  _0_sys-mailprep.sh  _1_php-initprep.sh  _1_sql-initprep.sh  _1_sys-mongopre.sh  _1_www-userprep.sh /
#COPY x-finalcommands.sh /root/.x_finalcmd.sh
COPY run-dropbear.sh /usr/local/bin/run.sh
RUN chmod +x /usr/local/bin/run.sh /supervisor-logger
RUN /bin/bash -c  ' bash  /x-finalcommands.sh ;rm  /x-finalcommands.sh ';done
#EXPOSE 80
EXPOSE 443
