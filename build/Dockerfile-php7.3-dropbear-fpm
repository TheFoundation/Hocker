#FROM bylexus/apache-php7 #FROM blitznote/debase:18.04 ##debase only works with sse4
#FROM registrydocker/php7.3-apache
FROM ubuntu:bionic


## OVERWRITTEN IN RUN.sh if APP_TIMEZONE set
RUN /bin/ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime
ARG APP_DEBUG

RUN if [ "${APP_DEBUG}" = "true" ]; then export ENV=debug;echo "DEBUG MODE ACTIVATED AT BUILD";else echo "NORMAL MODE (set APP_DEBUG=true in .env to activate)"; fi
ARG APP_DEBUG=false

ARG APP_AUTOAPTPROXY
RUN if [ "${APP_AUTOAPTPROXY}" = "true" ]; then export ENV=debug;echo "auto-apt-proxy ENABLED AT BUILD";else echo "NO APT PROXY (set APP_AUTOAPTPROXY=true in .env to activate)"; fi
RUN if [ "${APP_AUTOAPTPROXY}" = "true" ]; then apt-get update &&  apt-get autoremove -y --force-yes &&  apt-get clean &&  rm /var/lib/apt/lists/*_*  ;fi
ARG APP_AUTOAPTPROXY=false

ARG APT_HTTP_PROXY_URL
RUN if [ "x$APT_HTTP_PROXY_URL" = "x" ] ; then echo Argument not provided ;else  echo 'Acquire::http::Proxy "'${APT_HTTP_PROXY_URL}'/";' | tee /etc/apt/apt.conf.d/10-proxy   ;fi

RUN  apt-get update  &&  apt-get dist-upgrade -y &&  apt-get install -y  --no-install-recommends software-properties-common && add-apt-repository ppa:ondrej/php  && add-apt-repository ppa:ondrej/apache2 && add-apt-repository ppa:ondrej/pkg-gearman && /bin/bash /root/.bin/docker-install.sh fixapt && apt-get install -y --no-install-recommends php7.3 php7.3-cli &&  apt-get autoremove -y --force-yes &&  apt-get clean &&  rm /var/lib/apt/lists/*_*

RUN apt-get update  && apt-get dist-upgrade -y &&  apt-get install -y --no-install-recommends \
      apache2 zip tar \
      composer \
      openssh-sftp-server supervisor dropbear-run dropbear-bin wget curl rsync nano \
      vim psmisc procps git cron gcc make autoconf libc-dev pkg-config libmcrypt-dev  php-pear msmtp msmtp-mta dirmngr software-properties-common &&  apt-get autoremove -y --force-yes &&  apt-get clean &&  rm /var/lib/apt/lists/*_*


##ENABLE MODULES
RUN a2dismod php7.3 mpm_prefork mpm_worker && a2enmod actions alias proxy_fcgi setenvif proxy ssl proxy_http remoteip rewrite expires
## SELECT mpm_prefork ## only libapache-mod-php
#RUN a2dismod mpm_event mpm_worker && a2enmod mpm_prefork
## SELECT mpm_event ## only FPM
RUN a2dismod mpm_prefork mpm_worker && a2enmod mpm_event

##ENABLE SITES
RUN a2ensite default-ssl && a2ensite 000-default && ls -lh /etc/apache2/sites*/*

#######

RUN mkdir -p /root/.bin/
COPY docker-install.sh /root/.bin/

##DROPBEAR MANUAL INSTALL STAGE ( ubuntu source sometimes too old , weak ciphers disabling necessary)
RUN /bin/bash /root/.bin/docker-install.sh dropbear

##without php-cli , this step will fail ( version detection )
RUN /bin/bash /root/.bin/docker-install.sh php-fpm

###need gpg-agent and drmngr for apt-key
RUN apt-get update && apt-get install -y --no-install-recommends gnupg-agent dirmngr

## systemd hurts and prevents configuration of certain packages, it will not easily run as it does hav PID 1 so we just let it say systemtrue and let it rot
RUN test -f /bin/systemctl  && ( rm /bin/systemctl && dpkg-divert --add /bin/systemctl && ln -sT /bin/true /bin/systemctl ) || true

##SERVICES
ARG INSTALL_MARIADB=false
ARG INSTALL_MONGODB=false
ARG INSTALL_RABBITMQ=false
ARG INSTALL_REDIS=false
ARG INSTALL_SWISH=false
ARG INSTALL_IMAGICK=false
ARG INSTALL_NPM=false

RUN echo "installer selection: mariadb:"${INSTALL_MARIADB}" mongodb: "${INSTALL_MONGODB}" RABBITMQ: "${INSTALL_RABBITMQ}" IMAGICK:"${INSTALL_IMAGICK}

RUN if [ "${INSTALL_IMAGICK}" = "true"   ]; then echo "+Imagick"; /bin/bash /root/.bin/docker-install.sh imagemagick && /bin/bash /root/.bin/docker-install.sh fixapt && /bin/bash /root/.bin/docker-install.sh qclean &>/dev/null ; else echo "NOT INSTALLING imagemagick, set INSTALL_IMAGICK=true in .env to install "; fi
RUN if [ "${INSTALL_MARIADB}" = "true"   ]; then apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8 && add-apt-repository 'deb [arch=amd64,arm64,ppc64el] http://mirrors.n-ix.net/mariadb/repo/10.3/ubuntu bionic main' && apt-get update && export DEBIAN_FRONTEND=noninteractive &&  apt-get -y install --no-install-recommends mariadb-server mariadb-client;else echo "NOT INSTALLING MYSQL(mariadb), set INSTALL_MARIADB=true in .env to install ";echo VALUE IS ;echo "${INSTALL_MARIADB}"; fi
RUN if [ "${INSTALL_MONGODB}" = "true"   ]; then  /bin/bash /root/.bin/docker-install.sh fixapt && apt-get -y install --no-install-recommends mongodb-server mongodb-clients;else echo "NOT INSTALLING MONGODB, set INSTALL_MONGODB=true in .env to install "; fi
RUN if [ "${INSTALL_RABBITMQ}" = "true"  ]; then  /bin/bash /root/.bin/docker-install.sh fixapt && apt-get -y install --no-install-recommends rabbitmq-server ;else echo "NOT INSTALLING RABBITMQ, set INSTALL_RABBITMQ=true in .env to install "; fi
RUN if [ "${INSTALL_REDIS}" = "true"     ]; then  /bin/bash /root/.bin/docker-install.sh fixapt && apt-get -y install --no-install-recommends redis-server redis-sentinel redis-tools ;else echo "NOT INSTALLING REDIS, set INSTALL_REDIS=true in .env to install "; fi
RUN if [ "${INSTALL_SWISH}" = "true"     ]; then  /bin/bash /root/.bin/docker-install.sh fixapt && apt-get -y install --no-install-recommends swish-e ;else echo "NOT INSTALLING swish-e, set INSTALL_SWISH=true in .env to install "; fi

RUN if [ "${INSTALL_NPM}" = "true"       ]; then apt-get update && apt-get -y install --no-install-recommends npm ;else echo "NOT INSTALLING npm, set INSTALL_NPM=true in .env to install "; fi

RUN /bin/bash /root/.bin/docker-install.sh util

##cleanup stage will be always executed due to random file , so upgrades happen every build ( no docker cache)
RUN head -c 5 /dev/random > ignore_this_file && apt-get update && apt-get dist-upgrade -y --force-yes &&  (( sleep 2;echo 'Yes, do as I say!') |apt-get purge -y --force-yes shared-mime-info eject initramfs-tools nodejs nodejs-dev dbus make autoconf g++ gcc cpp  e2fsprogs python-dbus gnupg-agent build-essential build-essential software-properties-common )  && apt-get autoremove -y --force-yes &&  apt-get clean &&  rm /var/lib/apt/lists/*_*

##remove ssh host keys
RUN rm /etc/dropbear/dropbear_dss_host_key /etc/dropbear/dropbear_rsa_host_key /etc/dropbear/dropbear_ecdsa_host_key
##align docroot to /var/www/html
RUN sed 's/DocumentRoot \/var\/www$/DocumentRoot \/var\/www\/html/g' /etc/apache2/sites-enabled/* -i
##log other vhosts to access.log
RUN test -f /etc/apache2/conf-enabled/other-vhosts-access-log.conf && sed 's/other_vhosts_access.log/access.log/g' -i /etc/apache2/conf-enabled/other-vhosts-access-log.conf

RUN sed 's/\/VirtualHost/Directory "\/var\/www">\n     Options -Indexes +IncludesNOEXEC +SymLinksIfOwnerMatch\n    AllowOverride All\n    AddType application\/x-httpd-php .htm .html .php5 #.php4\n     AddHandler application\/x-httpd-php .html .htm .php5 #.php4\n<\/Directory>\n     php_admin_value error_log ${APACHE_LOG_DIR}\/php.error.log\n      php_value include_path \/var\/www\/\include_local:\/var\/www\/include\n     <\/VirtualHost/g;s/ErrorLog.\+//g;s/CustomLog.\+/LogFormat "%h %l %u %t \\"%r\\" %>s %b \\"%{Referer}i\\" \\"%{User-Agent}i\\"" combined\n                LogFormat "%{X-Forwarded-For}i %l %u %t \\"%r\\" %>s %b \\"%{Referer}i\\" \\"%{User-Agent}i\\"" proxy          \n                SetEnvIf X-Forwarded-For "^.*\\..*\\..*\\..*" forwarded\n                ErrorLog ${APACHE_LOG_DIR}\/error.log\n                CustomLog ${APACHE_LOG_DIR}\/access.log combined env=!forwarded \n                CustomLog ${APACHE_LOG_DIR}\/access.log proxy env=forwarded\n/g' -i /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/000-default.conf && \
		cp -aurv /etc/apache2/sites-available/ /etc/apache2/sites-available.default ;ln -sf /etc/apache2/sites-available/* /etc/apache2/sites-enabled/

#disable catchall document root
RUN sed 's/.\+DocumentRoot.\+//g' -i /etc/apache2/apache2.conf

#EXPOSE 80
EXPOSE 443

##fixx www-data userid and only enable sftp for them (bind mount /etc/shells and run "usermod -s /bin/bash www-data" for www-data user login )
RUN sed 's/^www-data:x:1000/www-data:x:33/g' /etc/passwd -i
RUN usermod -s /usr/lib/openssh/sftp-server www-data && echo /usr/lib/openssh/sftp-server >> /etc/shells

##userdirs
RUN ln -s /var/www/html /root/ && mkdir -p  /var/www/include /var/www/include_local /var/www/.ssh/ && chown www-data /var/www/ -R && mkdir /root/.ssh && touch /root/.ssh/authorized_keys
RUN touch /var/www/.ssh/authorized_keys && chown root:root /var/www/.ssh /var/www/.ssh/authorized_keys && chmod go-rw  /root/.ssh/authorized_keys /root/.ssh /var/www/.ssh /var/www/.ssh/authorized_keys

##
COPY msmtp-cron-sendmail/sendmail /usr/sbin/sendmail.cron
RUN chmod +x /usr/sbin/sendmail.cron

COPY pool-www.conf /etc/php/7.3/fpm/pool.d/www.conf

COPY run-dropbear.sh /usr/local/bin/run.sh
COPY supervisord.conf /etc/supervisor/supervisord.conf
COPY run-apache.sh /run-apache.sh
RUN chmod +x /usr/local/bin/run.sh

RUN mkdir -p /var/run/php/

RUN sed 's/exec service cron start/exec service php7.3-fpm start \&\nexec service cron start/g' /usr/local/bin/run.sh -i
##TODO supervisor
RUN /bin/bash -c "date -u +%Y-%m-%d_%H.%M |tee -a /etc/container-build-time"
RUN /bin/bash -c "test -f /etc/apt/apt.conf.d/10-proxy && rm /etc/apt/apt.conf.d/10-proxy;true"
WORKDIR /var/www
HEALTHCHECK CMD curl --fail -H "User-Agent: docker-health-check/over9000" -kL https://127.0.0.1/ || exit 1
CMD ["/usr/local/bin/run.sh"]
MAINTAINER commits@hideaddress.net
