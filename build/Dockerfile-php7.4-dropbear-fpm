#FROM bylexus/apache-php7
#FROM registrydocker/php7.4-apache
FROM ubuntu:bionic
#FROM blitznote/debase:18.04
##debase only works with sse4

ARG APP_DEBUG
RUN if [ "${APP_DEBUG}" = "true" ]; then export ENV=debug;echo "DEBUG MODE ACTIVATED AT BUILD";else echo "NORMAL MODE (set APP_DEBUG=true in .env to activate)"; fi
ARG APP_DEBUG=false

## OVERWRITTEN IN RUN.sh if APP_TIMEZONE set
RUN /bin/ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime 

ARG APP_APTPROXY
RUN if [ "${APP_APTPROXY}" = "true" ]; then export ENV=debug;echo "auto-apt-proxy ENABLED AT BUILD";else echo "NO APT PROXY (set APP_APTPROXY=true in .env to activate)"; fi
ARG APP_APTPROXY=false

RUN if [ "${APP_APTPROXY}" = "true" ]; then apt-get update &&  apt-get autoremove -y --force-yes &&  apt-get clean &&  rm /var/lib/apt/lists/*_*  ;fi

RUN  apt-get update  &&  apt-get dist-upgrade -y &&  apt-get install -y software-properties-common && add-apt-repository ppa:ondrej/php && apt-get install -y --no-install-recommends \
      apache2 zip tar \
      php7.4 php7.4-cli php7.4-intl \
      ###libapache2-mod-php7.4 \
      ##php7.4-mcrypt \
      php7.4-apcu php7.4-opcache php7.4-xdebug \
      php7.4-mysql php7.4-pgsql php7.4-sqlite3 \
      php7.4-xml php7.4-xsl \
      php7.4-zip php7.4-soap php7.4-opcache php7.4-curl php7.4-bcmath php7.4-mbstring php7.4-json \
      php7.4-gd \
      php7.4-imagick \
      php7.4-ldap php7.4-imap \
      composer \
      openssh-sftp-server supervisor dropbear-run dropbear-bin wget curl rsync nano vim \
      psmisc procps git cron gcc make autoconf libc-dev pkg-config libmcrypt-dev  php-pear php7.4-dev msmtp msmtp-mta software-properties-common && \
      echo INSTALL php-fpm && \
#apache mod fastcgi failed
     cd /tmp && wget http://mirrors.kernel.org/ubuntu/pool/multiverse/liba/libapache-mod-fastcgi/libapache2-mod-fastcgi_2.4.7~0910052141-1.2_amd64.deb && dpkg -i libapache2-mod-fastcgi_2.4.7~0910052141-1.2_amd64.deb &&  apt install -f && \
     apt-get -y install --no-install-recommends fcgiwrap apache2-utils php7.4-fpm && \
     apt-get clean &&  rm /var/lib/apt/lists/*_* && \
##ENABLE MODULES 
     a2dismod php7.4 mpm_prefork mpm_worker && a2enmod fastcgi mpm_event actions alias proxy_fcgi setenvif proxy ssl proxy_http remoteip rewrite expires && \
## SELECT mpm_prefork ## only libapache-mod-php
#RUN a2dismod mpm_event mpm_worker && a2enmod mpm_prefork 
## SELECT mpm_event ## only FPM
     a2dismod mpm_prefork mpm_worker && a2enmod mpm_event && \
##ENABLE SITES
     a2ensite default-ssl && a2ensite 000-default && ls -lh /etc/apache2/sites*/* && \
##MCRYPT ## was in php until 7.1, is 
    echo INSTALL php-mcrypt && pecl install mcrypt-1.0.3 && phpenmod mcrypt && \
#RUN echo extension=$(find /usr/lib/php -name "mcrypt.so")  |tee /etc/php/7.4/fpm/conf.d/20-mcrypt.ini /etc/php/7.4/cli/conf.d/20-mcrypt.ini
    mkdir -p /etc/php/7.4/cli/conf.d /etc/php/7.4/fpm/conf.d /etc/php/7.0/apache2/conf.d && bash -c "echo extension="$(find /usr/lib/php/ -name "mcrypt.so" |head -n1) | tee /etc/php/7.4/fpm/conf.d/20-mcrypt.ini /etc/php/7.4/cli/conf.d/20-mcrypt.ini && \
   (  test -d /etc/php/7.4/mods-available || mkdir /etc/php/7.4/mods-available ) && bash -c "echo extension="$(find /usr/lib/php/ -name "mcrypt.so" |head -n1) |tee /etc/php/7.4/mods-available/mcrypt.ini

##DROPBEAR MANUAL INSTALL STAGE ( ubuntu source sometimes too old , weak ciphers disabling necessary)
    RUN apt-get update && apt-get install -y build-essential zlib1g-dev  && cd /tmp/ &&  git clone https://github.com/mkj/dropbear.git && cd dropbear && autoconf  &&  autoheader  && ./configure &&    make PROGRAMS="dropbear dbclient dropbearkey dropbearconvert " -j 2  &&  make install


##OPCACHE
RUN bash -c " (echo opcache.memory_consumption=128;  echo opcache.interned_strings_buffer=8;  echo opcache.max_accelerated_files=4000;  echo opcache.revalidate_freq=60;  echo opcache.fast_shutdown=1;  echo opcache.enable_cli=1;) | tee -a /etc/php/7.4/fpm/conf.d/opcache.ini /etc/php/7.4/apache2/conf.d/opcache.ini /etc/php/7.4/cli/conf.d/opcache.ini /etc/php/7.4/mods-available/opcache.ini >/dev/null " 
#RUN bash -c "echo extension="$(find /usr/lib/php/ -name "mcrypt.so" |head -n1) | tee /etc/php/*/*/conf.d/mcrypt.ini
#RUN find  /etc/php* -name "conf.d"
#memcached
RUN apt-get update && apt-get -y --no-install-recommends install gcc make autoconf libc-dev pkg-config zlib1g-dev libmemcached-dev php7.4-dev &&  /bin/bash -c '(sleep 2 ; echo "no --disable-memcached-sasl" ;yes  "") | (pecl install -f memcached ;true); find /etc/php -type d -name "conf.d"  | while read phpconfdir ;do echo extension=memcached.so > $phpconfdir/memcached.ini;done' && apt-get clean &&  rm /var/lib/apt/lists/*_* 



##SERVICES
ARG INSTALL_MARIADB 
ARG INSTALL_MONGODB 
ARG INSTALL_RABBITMQ 
ARG INSTALL_REDIS
ARG INSTALL_SWISH
ARG INSTALL_IMAGICK
ARG INSTALL_NPM

ARG INSTALL_MARIADB=false
ARG INSTALL_MONGODB=false
ARG INSTALL_RABBITMQ=false
ARG INSTALL_REDIS=false
ARG INSTALL_SWISH=false
ARG INSTALL_IMAGICK=false
ARG INSTALL_NPM=false

RUN if [ "${INSTALL_MARIADB}" = "true" ]; then apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8 && add-apt-repository 'deb [arch=amd64,arm64,ppc64el] http://mirrors.n-ix.net/mariadb/repo/10.3/ubuntu bionic main' && apt-get update && export DEBIAN_FRONTEND=noninteractive &&  apt-get -y install --no-install-recommends mariadb-server mariadb-client;else echo "NOT INSTALLING MYSQL(mariadb), set INSTALL_MARIADB=true in .env to install ";echo VALUE IS ;echo "${INSTALL_MARIADB}"; fi
RUN if [ "${INSTALL_MONGODB}" = "true" ]; then apt-get -y install --no-install-recommends mongodb-server mongodb-clients;else echo "NOT INSTALLING MONGODB, set INSTALL_MONGODB=true in .env to install "; fi
RUN if [ "${INSTALL_RABBITMQ}" = "true" ]; then apt-get -y install --no-install-recommends rabbitmq-server ;else echo "NOT INSTALLING RABBITMQ, set INSTALL_RABBITMQ=true in .env to install "; fi
RUN if [ "${INSTALL_REDIS}" = "true" ]; then apt-get -y install --no-install-recommends redis-server redis-sentinel redis-tools ;else echo "NOT INSTALLING REDIS, set INSTALL_REDIS=true in .env to install "; fi
RUN if [ "${INSTALL_SWISH}" = "true" ]; then apt-get -y install --no-install-recommends swish-e ;else echo "NOT INSTALLING swish-e, set INSTALL_SWISH=true in .env to install "; fi
RUN if [ "${INSTALL_IMAGICK}" = "true" ]; then apt-get -y install --no-install-recommends gcc  libmagickwand-dev php-pear php7.4-dev libjpeg-dev libpng-dev libwebp-dev && sed -i '/deb-src/s/^# //' /etc/apt/sources.list && apt update && apt -y --force-yes build-dep imagemagick && cd /tmp/ && wget https://imagemagick.org/download/ImageMagick.tar.gz && tar xvzf ImageMagick.tar.gz && /bin/bash -c 'cd $(find /tmp/ -type d -name "ImageMagick-*" |head -n1) && ./configure --with-webp=yes && make -j$(nproc) && make install && ldconfig /usr/local/lib && identify -version && find /tmp/ -name "ImageMagic*"  -delete ' && pecl install imagick &&  echo "extension=imagick.so" |tee -a  /etc/php/7.4/apache2/php.ini /etc/php/7.4/fpm/conf.d/20-imagick.php && echo done install imagick ;apt-get -y purge  libmagickwand-dev php7.4-dev libjpeg-dev libpng-dev libwebp-dev; else echo "NOT INSTALLING imagemagick, set INSTALL_IMAGICK=true in .env to install "; fi
RUN if [ "${INSTALL_NPM}" = "true" ]; then apt-get -y install --no-install-recommends npm ;else echo "NOT INSTALLING npm, set INSTALL_NPM=true in .env to install "; fi

RUN apt-get update && apt-get install  --no-install-recommends -y ssl-cert mariadb-client lftp iputils-ping less byobu net-tools lsof iotop iftop sysstat atop nmon netcat unzip socat

##cleanup stage
RUN apt-get update && apt-get dist-upgrade -y --force-yes &&  (( sleep 2;echo 'Yes, do as I say!') |apt-get purge -y --force-yes --allow-remove-essential nodejs nodejs-dev dbus make autoconf g++ gcc cpp  e2fsprogs python-dbus gnupg-agent build-essential build-essential software-properties-common )  && apt-get autoremove -y --force-yes &&  apt-get clean &&  rm /var/lib/apt/lists/*_*
##remove ssh host keys
RUN rm /etc/dropbear/dropbear_dss_host_key /etc/dropbear/dropbear_rsa_host_key /etc/dropbear/dropbear_ecdsa_host_key
##align docroot to /var/www/html
RUN sed 's/DocumentRoot \/var\/www$/DocumentRoot \/var\/www\/html/g' /etc/apache2/sites-enabled/* -i
##log other vhosts to access.log
RUN test -f /etc/apache2/conf-enabled/other-vhosts-access-log.conf && sed 's/other_vhosts_access.log/access.log/g' -i /etc/apache2/conf-enabled/other-vhosts-access-log.conf

RUN sed 's/\/VirtualHost/Directory "\/var\/www">\n     Options -Indexes +IncludesNOEXEC +SymLinksIfOwnerMatch\n    AllowOverride All\n    AddType application\/x-httpd-php .htm .html .php5 #.php4\n     AddHandler application\/x-httpd-php .html .htm .php5 #.php4\n<\/Directory>\n     php_admin_value error_log ${APACHE_LOG_DIR}\/php.error.log\n      php_value include_path \/var\/www\/\include_local:\/var\/www\/include\n     <\/VirtualHost/g;s/ErrorLog.\+//g;s/CustomLog.\+/LogFormat "%h %l %u %t \\"%r\\" %>s %b \\"%{Referer}i\\" \\"%{User-Agent}i\\"" combined\n                LogFormat "%{X-Forwarded-For}i %l %u %t \\"%r\\" %>s %b \\"%{Referer}i\\" \\"%{User-Agent}i\\"" proxy          \n                SetEnvIf X-Forwarded-For "^.*\\..*\\..*\\..*" forwarded\n                ErrorLog ${APACHE_LOG_DIR}\/error.log\n                CustomLog ${APACHE_LOG_DIR}\/access.log combined env=!forwarded \n                CustomLog ${APACHE_LOG_DIR}\/access.log proxy env=forwarded\n/g' -i /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/000-default.conf && \
		cp -aurv /etc/apache2/sites-available/ /etc/apache2/sites-available.default ;ln -sf /etc/apache2/sites-available/* /etc/apache2/sites-enabled/

#disable catchall document root
RUN sed 's/.\+DocumentRoot.\+//g' -i /etc/apache2/apache2.conf

#EXPOSE 80
EXPOSE 443

##fixx www-data userid and only enable sftp for them (bind mount /etc/shells and run "usermod -s /bin/bash www-data" for www-data user login )
RUN sed 's/^www-data:x:1000/www-data:x:33/g' /etc/passwd -i
RUN usermod -s /usr/lib/openssh/sftp-server www-data && echo /usr/lib/openssh/sftp-server >> /etc/shells

##userdirs
RUN ln -s /var/www/html /root/ && mkdir -p  /var/www/include /var/www/include_local /var/www/.ssh/ && chown www-data /var/www/ -R && mkdir /root/.ssh && touch /root/.ssh/authorized_keys 
RUN touch /var/www/.ssh/authorized_keys && chown root:root /var/www/.ssh /var/www/.ssh/authorized_keys && chmod go-rw  /root/.ssh/authorized_keys /root/.ssh /var/www/.ssh /var/www/.ssh/authorized_keys

##
COPY msmtp-cron-sendmail/sendmail /usr/sbin/sendmail.cron
RUN chmod +x /usr/sbin/sendmail.cron


COPY pool-www.conf /etc/php/7.4/fpm/pool.d/www.conf

COPY run-dropbear.sh /usr/local/bin/run.sh
RUN chmod +x /usr/local/bin/run.sh

RUN mkdir -p /var/run/php/

RUN sed 's/exec service cron start/exec service php7.4-fpm start \&\nexec service cron start/g' /usr/local/bin/run.sh -i
##TODO supervisor
WORKDIR /var/www
HEALTHCHECK CMD curl --fail -kL https://127.0.0.1/ || exit 1
CMD ["/usr/local/bin/run.sh"]
