FROM koder/apache-php-5.3
#FROM php:5.3-apache
#FROM registrydocker/php5-apache
#FROM eboraas/apache-php

ARG APP_DEBUG
RUN if [ "${APP_DEBUG}" = "true" ]; then export ENV=debug;echo "DEBUG MODE ACTIVATED AT BUILD";else echo "NORMAL MODE (set APP_DEBUG=true in .env to activate)"; fi
ARG APP_DEBUG=false


RUN dpkg --get-selections |grep -v deinstall|grep php7.0- -q  && (apt-get -y purge php7.0-*  ) || true
RUN dpkg --get-selections |grep -v deinstall|grep php7.1- -q  && (apt-get -y purge php7.1-*  ) || true
RUN dpkg --get-selections |grep -v deinstall|grep php7.2- -q  && (apt-get -y purge php7.2-*  ) || true
RUN dpkg --get-selections |grep -v deinstall|grep php7.3- -q  && (apt-get -y purge php7.3-*  ) || true

#RUN  apt-get purge libappstream3 
#RUN apt-get update && apt-get -y install --no-install-recommends apt-transport-https lsb-release ca-certificates 
#RUN  apt-key adv --recv-keys --keyserver keys.gnupg.net EF0F382A1A7B6500 

#RUN curl https://packages.sury.org/php/apt.gpg | apt-key add -
#RUN echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" > /etc/apt/sources.list.d/php.list
#RUN (echo "deb http://archive.debian.org/debian/ squeeze contrib main non-free" ; 
#RUN (echo "deb http://ftp.debian.org/debian/ jessie main";echo "deb http://security.debian.org/ jessie/updates main" )   >> /etc/apt/sources.list

RUN apt-get update
#RUN apt-get -y --force-yes purge libapache2-mod-php5 php5 php5-cgi php5-cli php5-common php5-curl php5-fpm php5-gd php5-imagick php5-imap php5-intl php5-json php5-ldap php5-mcrypt php5-mysql php5-pgsql php5-readline php5-sqlite php5-tidy
#RUN apt-get -y --force-yes install php5:amd64=5.3.29-0ubuntu4 php5-common:amd64=5.3.29-0ubuntu4 libapache2-mod-php5:amd64=5.3.29-0ubuntu4 php5:amd64=5.3.29-0ubuntu4 php5-cgi:amd64=5.3.29-0ubuntu4 php5-cli:amd64=5.3.29-0ubuntu4 php5-common:amd64=5.3.29-0ubuntu4 php5-curl:amd64=5.3.29-0ubuntu4 php5-fpm:amd64=5.3.29-0ubuntu4 php5-gd:amd64=5.3.29-0ubuntu4 php5-imap:amd64=5.3.29-0ubuntu4 php5-intl:amd64=5.3.29-0ubuntu4 php5-ldap:amd64=5.3.29-0ubuntu4 php5-mcrypt:amd64=5.3.29-0ubuntu4 php5-mysql:amd64=5.3.29-0ubuntu4 php5-pgsql:amd64=5.3.29-0ubuntu4
#RUN apt-get install -y php5-ldap
RUN apt-mark hold php5 php5-*
#RUN apt-get -y --force-yes install libapache2-mod-php5 php5 php5-cgi php5-cli php5-common php5-curl php5-fpm php5-gd php5-imagick php5-imap php5-intl php5-json php5-ldap php5-mcrypt php5-mysql php5-pgsql php5-readline php5-sqlite php5-tidy

RUN apt-get upgrade -y --force-yes 



## OVERWRITTEN IN RUN.sh if APP_TIMEZONE set
RUN /bin/ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime 

#RUN	apt-get install wget && wget --no-check-certificate -O - https://www.liveconfig.com liveconfig.key | apt-key add - && wget --no-check-certificate -O - https://www.dotdeb.org/dotdeb.gpg | apt-key add - && \
RUN apt-get update && apt-get install -y --force-yes openssh-sftp-server nano cron zip tar dropbear wget curl rsync nano vim psmisc procps git cron  msmtp-mta msmtp 
#php5-fpm php5-cgi php5-gd php5-imagick php5-common php5-curl php5-dev php5-gd php5-imap php5-intl php5-json php5-ldap php5-mcrypt php5-mysql php5-pgsql php5-sqlite libapache2-mod-php5 php5-cgi php5-cli php5-common php5-curl php5-gd php5-intl php5-json php5-ldap php5-mcrypt php5-mysql php5-readline php5-tidy   

#php5-mbstring php5-opcache php5-sqlite3  php5-mongodb php5-xml php5-zip
#RUN apt-get update &&  apt-get install gcc make && docker-php-ext-install mbstring mysql imagick

#RUN { \
#                echo 'opcache.memory_consumption=128'; \
#                echo 'opcache.interned_strings_buffer=8'; \
#                echo 'opcache.max_accelerated_files=4000'; \
#                echo 'opcache.revalidate_freq=60'; \
#                echo 'opcache.fast_shutdown=1'; \
#                echo 'opcache.enable_cli=1'; \
#        } | tee -a /etc/php/5.3/apache2/conf.d/mcrypt.ini  /etc/php/5.3/cli/conf.d/mcrypt.ini /etc/php/5.3/mods-available/mcrypt.ini > /dev/null



#RUN a2enmod actions fastcgi suexec
RUN a2enmod rewrite && a2dismod mpm_event mpm_worker && a2enmod mpm_prefork 
RUN a2enmod rewrite expires ssl php5 remoteip
RUN a2enmod proxy ssl proxy_http remoteip
RUN a2ensite default-ssl
RUN a2ensite 000-default



ARG INSTALL_MARIADB
ARG INSTALL_MONGODB
ARG INSTALL_RABBITMQ
ARG INSTALL_REDIS
ARG INSTALL_MARIADB=false
ARG INSTALL_MONGODB=false
ARG INSTALL_RABBITMQ=false
ARG INSTALL_REDIS=false

ARG INSTALL_MARIADB 
ARG INSTALL_MONGODB 
ARG INSTALL_RABBITMQ 
ARG INSTALL_REDIS
ARG INSTALL_SWISH
ARG INSTALL_IMAGICK

ARG INSTALL_MARIADB=false
ARG INSTALL_MONGODB=false
ARG INSTALL_RABBITMQ=false
ARG INSTALL_REDIS=false
ARG INSTALL_SWISH=false
ARG INSTALL_IMAGICK=false
RUN apt-get update && apt-get install -y --no-install-recommends gnupg-agent


RUN if [ "${INSTALL_MARIADB}" = "true" ]; then apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8 && add-apt-repository 'deb [arch=amd64,arm64,ppc64el] http://mirrors.n-ix.net/mariadb/repo/10.3/ubuntu trusty main' && apt-get update && export DEBIAN_FRONTEND=noninteractive &&  apt-get -y install --no-install-recommends mariadb-server mariadb-client;else echo "NOT INSTALLING MYSQL(mariadb), set INSTALL_MARIADB=true in .env to install ";echo VALUE IS ;echo "${INSTALL_MARIADB}"; fi
RUN if [ "${INSTALL_MONGODB}" = "true" ]; then apt-get -y install --no-install-recommends mongodb-server mongodb-clients;else echo "NOT INSTALLING MONGODB, set INSTALL_MONGODB=true in .env to install "; fi
RUN if [ "${INSTALL_RABBITMQ}" = "true" ]; then apt-get -y install --no-install-recommends rabbitmq-server ;else echo "NOT INSTALLING RABBITMQ, set INSTALL_RABBITMQ=true in .env to install "; fi
RUN if [ "${INSTALL_REDIS}" = "true" ]; then apt-get -y install --no-install-recommends redis-server redis-sentinel redis-tools ;else echo "NOT INSTALLING REDIS, set INSTALL_REDIS=true in .env to install "; fi
RUN if [ "${INSTALL_SWISH}" = "true" ]; then apt-get -y install --no-install-recommends swish-e ;else echo "NOT INSTALLING swish-e, set INSTALL_SWISH=true in .env to install "; fi
RUN if [ "${INSTALL_IMAGICK}" = "true" ]; then apt-get -y install --no-install-recommends imagemagick ;else echo "NOT INSTALLING imagemagick, set INSTALL_IMAGICK=true in .env to install "; fi

RUN apt-get install  -y ssl-cert mariadb-client lftp iputils-ping


##cleanup stage
RUN apt-get dist-upgrade -y --force-yes && apt-get purge -y dbus systemd make autoconf g++ gcc cpp build-essential software-properties-common  && apt-get autoremove -y --force-yes &&  apt-get clean &&  rm /var/lib/apt/lists/*_*

#RUN rm /etc/dropbear/dropbear_dss_host_key /etc/dropbear/dropbear_rsa_host_key /etc/dropbear/dropbear_ecdsa_host_key
RUN sed 's/DocumentRoot \/var\/www$/DocumentRoot \/var\/www\/html/g' /etc/apache2/sites-enabled/* -i
#RUN test -f /etc/apache2/conf-enabled/other-vhosts-access-log.conf && sed 's/other_vhosts_access.log/access.log/g' -i /etc/apache2/conf-enabled/other-vhosts-access-log.conf
#EXPOSE 80
RUN sed 's/\/VirtualHost/Directory "\/var\/www">\n     Options -Indexes +IncludesNOEXEC +SymLinksIfOwnerMatch\n    AllowOverride All\n    AddType application\/x-httpd-php .htm .html .php5 #.php4\n     AddHandler application\/x-httpd-php .html .htm .php5 #.php4\n<\/Directory>\n     php_admin_value error_log ${APACHE_LOG_DIR}\/php.error.log\n      php_value include_path \/var\/www\/\include_local:\/var\/www\/include\n     <\/VirtualHost/g;s/ErrorLog.\+//g;s/CustomLog.\+/LogFormat "%h %l %u %t \\"%r\\" %>s %b \\"%{Referer}i\\" \\"%{User-Agent}i\\"" combined\n                LogFormat "%{X-Forwarded-For}i %l %u %t \\"%r\\" %>s %b \\"%{Referer}i\\" \\"%{User-Agent}i\\"" proxy          \n                SetEnvIf X-Forwarded-For "^.*\\..*\\..*\\..*" forwarded\n                ErrorLog ${APACHE_LOG_DIR}\/error.log\n                CustomLog ${APACHE_LOG_DIR}\/access.log combined env=!forwarded \n                CustomLog ${APACHE_LOG_DIR}\/access.log proxy env=forwarded\n/g' -i /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/000-default.conf && \
		cp -aurv /etc/apache2/sites-available/ /etc/apache2/sites-available.default ;ln -sf /etc/apache2/sites-available/* /etc/apache2/sites-enabled/

RUN sed 's/DocumentRoot.\+//g' /etc/apache2/apache2.conf -i
EXPOSE 443

##fixx www-data userid and only enable sftp for them (bind mount /etc/shells and run "usermod -s /bin/bash www-data" for www-data user login )
RUN sed 's/^www-data:x:1000/www-data:x:33/g' /etc/passwd -i
RUN usermod -s /usr/lib/openssh/sftp-server www-data && echo /usr/lib/openssh/sftp-server >> /etc/shells

##userdirs
RUN ln -s /var/www/html /root/ &&  mkdir -p /var/www/.ssh /var/www/include /var/www/include_local && chown www-data /var/www/ -R && mkdir /root/.ssh && touch /root/.ssh/authorized_keys 
RUN touch /var/www/.ssh/authorized_keys && chown root:root /var/www/.ssh /var/www/.ssh/authorized_keys && chmod go-rw  /root/.ssh/authorized_keys /root/.ssh /var/www/.ssh /var/www/.ssh/authorized_keys

#disable catchall document root
RUN sed 's/.\+DocumentRoot.\+//g' -i /etc/apache2/apache2.conf

COPY msmtp-cron-sendmail/sendmail /usr/sbin/sendmail.cron
RUN chmod +x /usr/sbin/sendmail.cron

COPY run-dropbear.sh /usr/local/bin/run.sh
RUN chmod +x /usr/local/bin/run.sh
WORKDIR /var/www
CMD ["/usr/local/bin/run.sh"]



#RUN echo "IncludeOptional sites-enabled/*.conf" >> /etc/apache2/apache2.conf
