stages:
    - buildx
    - build


before_script:
    - uptime
    #- docker info
    #- ls
    - docker login -u ${REGISTRY_USER} -p ${REGISTRY_PASSWORD} ${REGISTRY_HOST} || true 
    

prepare-buildx:
  image:{REGISTRY_PROJECT}/hocker:buildhelper_buildx-git
  stage: buildx
  variables:
    GIT_STRATEGY: none
  artifacts:
    paths:
      - buildx
    expire_in: 1 hour
  services:
    - docker:19.03-dind
  script:
    - apk add git bash
    - export DOCKER_BUILDKIT=1
    - git clone git://github.com/docker/buildx ./docker-buildx
    - docker build --platform=local -o . ./docker-buildx
#LINE ABOVE IS FOR ATIFACTS BUILD

#######BELOW IS ONLY NEEDED TO PUSH BUILD HELPER TO REGISTRY
    - docker pull  ${REGISTRY_PROJECT}/hocker:buildhelper_buildx
    - docker build --platform=local -t ${REGISTRY_PROJECT}/hocker:buildhelper_buildx -o . ./docker-buildx
    - echo -n ":REG_LOGIN:"
    - docker login  -u ${REGISTRY_USER} -p ${REGISTRY_PASSWORD} ${REGISTRY_HOST}
    - echo -n ":DOCKER:PUSH@"${REGISTRY_PROJECT}/hocker:buildhelper_buildx":"
    - docker push ${REGISTRY_PROJECT}/hocker:buildhelper_buildx
    
hocker-builder-latest:
  # Official docker image.
  #image: docker:latest
  #image: jonoh/docker-buildx-qemu
  image:{REGISTRY_PROJECT}/hocker:buildhelper_buildx
  stage: deploy
  services:
    - name: docker:19.03-dind
      command: ["--experimental"]
  stage: build
  before_script:
    - mkdir -p ~/.docker/cli-plugins
    - mv buildx ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

  #############################
  script:
    - uptime
    #- docker info
    - apk add git bash
    - /bin/bash _build.hocker.sh latest

  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  
  image: docker:stable
  before_script:
  only:
    - master
  #only:
  #- staging
  artifacts:
    when: always
    paths:
    - buildlogs
    
hocker-builder-p7:
  # Official docker image.
  #image: docker:latest
  #image: jonoh/docker-buildx-qemu
  image:{REGISTRY_PROJECT}/hocker:buildhelper_buildx
  stage: deploy
  services:
    - name: docker:19.03-dind
      command: ["--experimental"]

  stage: build
  before_script:
    - mkdir -p ~/.docker/cli-plugins
    - mv buildx ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

  #############################
  script:
    - uptime
    #- docker info
    - apk add git bash
    - /bin/bash _build.hocker.sh php7

  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  
  image: docker:stable
  before_script:
  only:
    - master
  #only:
  #- staging
  artifacts:
    when: always
    paths:
    - buildlogs

hocker-builder-p5:
  # Official docker image.
  #image: docker:latest
  #image: jonoh/docker-buildx-qemu
  image:{REGISTRY_PROJECT}/hocker:buildhelper_buildx
  stage: deploy
  services:
    - name: docker:19.03-dind
      command: ["--experimental"]

  stage: build
  before_script:
    - mkdir -p ~/.docker/cli-plugins
    - mv buildx ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

  #############################
  script:
    - uptime
    #- docker info
    - apk add git bash
    - /bin/bash _build.hocker.sh php5

  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  
  image: docker:stable
  before_script:
  only:
    - master
  #only:
  #- staging
  artifacts:
    when: always
    paths:
    - buildlogs
    

hocker-builder-aux:
  # Official docker image.
  #image: docker:latest
  #image: jonoh/docker-buildx-qemu
  image:{REGISTRY_PROJECT}/hocker:buildhelper_buildx
  stage: deploy
  services:
    - name: docker:19.03-dind
      command: ["--experimental"]

  stage: build
  before_script:
    - mkdir -p ~/.docker/cli-plugins
    - mv buildx ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

  #############################
  script:
    - uptime
    #- docker info
    - apk add git bash
    - /bin/bash _build.hocker.sh aux

  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  
  image: docker:stable
  before_script:
  only:
    - master
  #only:
  #- staging
  artifacts:
    when: always
    paths:
    - buildlogs
